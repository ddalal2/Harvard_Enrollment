<!DOCTYPE html><!-- saved from url=(0050)http://getbootstrap.com/examples/starter-template/ --><html lang="en">  <head>    <meta content="text/html; charset=UTF-8" http-equiv="content-type">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1">    <meta name="description" content="">    <meta name="author" content="">    <link rel="icon" href="http://getbootstrap.com/favicon.ico">    <title>Dhairya Dalal - Analysis</title>    <!-- Bootstrap core CSS -->    <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">    <!-- Custom styles for this template -->    <link href="http://getbootstrap.com/examples/starter-template/starter-template.css"      rel="stylesheet">    <script src="./index_files/ie-emulation-modes-warning.js"></script>    <style type="text/css"></style>    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->    <script src="./index_files/ie10-viewport-bug-workaround.js"></script>  </head>  <body>    <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">      <div class="container">        <div class="navbar-header"> <button type="button" class="navbar-toggle"            data-toggle="collapse"            data-target=".navbar-collapse">            <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span>            <span class="icon-bar"></span> <span class="icon-bar"></span> </button>          <a class="navbar-brand" href="index.html">Harvard University -            Enrollment Analysis</a> </div>        <div class="collapse navbar-collapse">          <ul class="nav navbar-nav">            <li><a href="index.html">Home</a></li>            <li><a href="Rickshaw.html">Rickshaw.js</a></li>            <li class="active"><a href="methods.html">Methodology</a></li>          </ul>        </div>        <!--/.nav-collapse --> </div>    </div>    <div class="container">      <div class="starter-template">        <h1>Outline of My Process</h1>        <h3 style="text-align: left;">1. Getting the Data</h3>        <p style="text-align: left;">I used the <a href="http://nces.ed.gov/ipeds/datacenter/">IPEDS            Data Center</a> to get enrollment data from 2006 â€“ 2012. It seems          they only do gender and race breakdowns for fields of study every two          years. So in the end I had 4 data sets: 2006, 2008, 2010, and 2012.          The data was in a csv format with all the variable name encoded. You          can view raw data here: <a href="https://github.com/ddalal2/Harvard_Enrollment/tree/master/data">https://github.com/ddalal2/Harvard_Enrollment/tree/master/data</a></p>        <h3 style="text-align: left;">2. Data Munging</h3>        <p style="text-align: left;">Next I loaded the raw csv files into Pandas          dataframes in <a title="http://nbviewer.ipython.org/github/ddalal2/Harvard_Enrollment/blob/master/OIR-Data%20Munging.ipynb"            href="http://nbviewer.ipython.org/github/ddalal2/Harvard_Enrollment/blob/master/OIR-Data%20Munging.ipynb">iPython            Notebook</a> (see link for my source code). I pivoted the data on          year and fields of study. I also stripped all the column names of the          variable encodings so that they were more human readable. For example          "          <meta charset="utf-8">          <span style="color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 11.818181991577148px; font-style: normal; font-variant: normal; font-weight: bold; letter-spacing: normal; line-height: 10.909090995788574px; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: nowrap; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none; background-color: rgb(248, 248, 248);">EF2006CP.Major            field of study</span>" became "          <meta charset="utf-8">          <span style="color: rgb(51, 51, 51); font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 11.818181991577148px; font-style: normal; font-variant: normal; font-weight: bold; letter-spacing: normal; line-height: 10.909090995788574px; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: nowrap; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none; background-color: rgb(248, 248, 248);">Major            field of study</span>". Finally, consolidated all the data in a          single json file that had the following structure:</p>        <p style="text-align: left;"><br>        </p>        <p style="text-align: center;"><img title="Data Struct" alt="Data Struct"            src="images/data_struct.tiff">          <img style="width: 377px; height: 183px;" alt="datastruct" src="images/data_struct.jpeg"></p>        <h3 style="text-align: left;">3. Exploring Rickshaw for Visualizing</h3>        <p style="text-align: left;">Next I set up a quick HTML template using          Boostrap. Using D3.json, I loaded the json data into the browser and          used Jquery/Javascript to write the methods for creating different          views of the data for the visualization. I was planning on using          Rickshaw.js, a visualization framework built on top of D3. But about          2/3rds of the way in I didn't like how the visualization were turning          out, so I decided to explore another visualization library <a href="http://www.highcharts.com/">HighCharts.js</a>.          Luckily most of the code to handle the logic of data mining was          abstracted into methods, so I was able to reuse them for Highcharts.</p>        <h3 style="text-align: left;">4. Using Highcharts for Visualizing</h3>        <p style="text-align: left;">Highcharts is a very slick competitor to D3.js.          It was relatively easy to setup graphs and customize them using          highcharts. The more challenging aspects came into play when trying to          prepare the data for the visualizations. My source code for all the          graphing and data mining logic can be found here: <a title="https://github.com/ddalal2/Harvard_Enrollment/blob/master/js/viz.js"            href="https://github.com/ddalal2/Harvard_Enrollment/blob/master/js/viz.js">https://github.com/ddalal2/Harvard_Enrollment/blob/master/js/viz.js</a></p>        <h3 style="text-align: left;">4a. Harvard Enrollment Statistics Graph</h3>        <p style="text-align: left;">This graph displays the overall enrollment          trends per field of study from 2006 - 2012. This code behind this          graph is pretty straight forward. I looped over all the years and          constructed a series of data points corresponding to the yearly          enrollment totals for each field of study. To make life a bit easier,          I manually coded some reference maps that listed all the fields of          study, years, and some quirky name conventions. </p>        <h3 style="text-align: left;">4b. Field of Study Breakdown by Gender          Graph</h3>        <p style="text-align: left;">&nbsp;This graph looks at the gender break          down for each field of study in a given year. Similar the the Harvard          Enrollment graph, the logic was pretty straight word. Given that the          year is set, I looped over the fields of study and created two data          series, one for men and the other for women. Those were then fed into          a customized graph function.</p>        <h3 style="text-align: left;">4c. Breakdown of Race and Gender by Field          of Study Graph</h3>        <p style="text-align: left;">This graph looks the gender breakdown per          race/ethnicity in a given field of study and year. The logic for this          graph was a bit more involved due to quirky naming conventions in the          data. I had to utilize some abstract naming convention and do on the          fly renaming functions to get to my data.&nbsp; </p>        <h3 style="text-align: left;">4d. Other interactive features</h3>        <p style="text-align: left;">Finally added drop downs on the Field of Sudy          Breakdown by Gender graph and Breakdown of Race and Gender by Field of          Study graph. These drop downs allowed users to select different years          or fields of study (where applicable) to view the data differently.&nbsp;          On the backside, I set up Jquery listeners to keep track of whenever          changes to the drop downs were made. </p>        <h3 style="text-align: left;">5. Things to do differently</h3>        <div style="text-align: left;">a. Less hardcoding and more logic driven          code. Given that there were only a few category names, I was able to          hard code mappings manually for the code to loop over when generating          data series on the fly for the visualization. Ideally in a large data          set, there should be some smart logic that defines those mappings.<br>          b. 2008 Gender/Race Data. The name convention for this data was really          quirky. It had appendages like derived, old, and new. It wasn't really          consistent as to which variables had data. So I ended up dropping the          entire year in my visualization. I would have liked to have come up          with a better way to handle that data.<br>          c. General null data. Currently, the code shows 0 for null data. I          should have the visualization indicate to the user that it's null data          versus 0s. <br>        </div>      </div>    </div>    <!-- /.container -->    <!-- Bootstrap core JavaScript    ================================================== -->    <!-- Placed at the end of the document so the pages load faster -->  </body></html>